---
alwaysApply: true
---

# @kingteza/crud-component Library Documentation

## Overview

The `@kingteza/crud-component` is a comprehensive React CRUD (Create, Read, Update, Delete) component library built with Ant Design and TypeScript. It provides a complete solution for building data management interfaces with minimal configuration.

## Key Features

- **Full CRUD Operations**: Create, Read, Update, Delete, and Hide operations
- **13 Field Types**: Text, Email, Password, Number, Date, Time, Textarea, Select, Enum, Checkbox, Color, Image, File, Object
- **TypeScript Support**: Full type safety with generics
- **Internationalization**: Built-in i18n support with i18next
- **Responsive Design**: Mobile-first approach with grid layouts
- **Advanced Features**: Wizards, Import/Export, Drag & Drop, Search, Pagination
- **Customizable**: Extensive customization options for forms, tables, and actions

## Installation

```bash
npm install @kingteza/crud-component
npm install antd@^5.22.6 react@^18.3.1 react-dom@^18.3.1 react-router-dom@^7.0.0
```

## Setup

### 1. Initialize i18n (Required)

```typescript
import { setupI18n } from '@kingteza/crud-component';

// Basic setup
setupI18n();

// Advanced setup with custom translations
setupI18n({
  language: 'en',
  translations: {
    en: {
      'crud-component': {
        // your custom translations
      }
    }
  }
});
```

### 2. Basic Usage

```typescript
import React, { useState } from 'react';
import { CrudComponent } from '@kingteza/crud-component';

// Define your data type
interface User {
  id: string;
  name: string;
  email: string;
  status: 'active' | 'inactive';
  createdAt: Date;
}

const UserManagement = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [creating, setCreating] = useState(false);
  const [updating, setUpdating] = useState(false);
  const [deleting, setDeleting] = useState(false);

  // Define field configuration
  const fields = [
    {
      type: "text" as const,
      name: "name" as keyof User,
      label: "Full Name",
      required: true,
      placeholder: "Enter full name"
    },
    {
      type: "email" as const,
      name: "email" as keyof User,
      label: "Email Address",
      required: true,
      rules: [{ type: 'email' as const, message: 'Invalid email' }]
    },
    {
      type: "enum" as const,
      name: "status" as keyof User,
      label: "Status",
      enum: { active: "active", inactive: "inactive" },
      translation: {
        active: "Active",
        inactive: "Inactive"
      }
    }
  ];

  // CRUD handlers
  const handleCreate = async (data: User) => {
    setCreating(true);
    try {
      const newUser = await createUser(data);
      setUsers(prev => [...prev, newUser]);
    } finally {
      setCreating(false);
    }
  };

  const handleUpdate = async (data: User & { id: string }) => {
    setUpdating(true);
    try {
      const updatedUser = await updateUser(data);
      setUsers(prev => prev.map(u => u.id === data.id ? updatedUser : u));
    } finally {
      setUpdating(false);
    }
  };

  const handleDelete = async (id: string) => {
    setDeleting(true);
    try {
      await deleteUser(id);
      setUsers(prev => prev.filter(u => u.id !== id));
    } finally {
      setDeleting(false);
    }
  };

  return (
    <CrudComponent<User>
      data={users}
      fields={fields}
      loadingData={loading}
      isCreating={creating}
      isUpdating={updating}
      isDeleting={deleting}
      onCreate={handleCreate}
      onUpdate={handleUpdate}
      onDelete={handleDelete}
    />
  );
};
```

## Field Types Reference

### 1. Text Fields

```typescript
// Basic text field
{
  type: "text",
  name: "name",
  label: "Full Name",
  required: true,
  placeholder: "Enter full name"
}

// Email field with validation
{
  type: "email",
  name: "email",
  label: "Email Address",
  required: true,
  rules: [{ type: 'email', message: 'Invalid email' }]
}

// Password field
{
  type: "password",
  name: "password",
  label: "Password",
  required: true,
  rules: [{ min: 8, message: 'Password must be at least 8 characters' }]
}
```

### 2. Number Field

```typescript
{
  type: "number",
  name: "age",
  label: "Age",
  allowMinus: false,
  formatted: true, // Shows comma-separated numbers
  int: true, // Integer only
  placeholder: "Enter age",
  min: 0,
  max: 120
}
```

### 3. Date Field

```typescript
{
  type: "date",
  name: "birthDate",
  label: "Birth Date",
  format: "YYYY-MM-DD",
  disableToday: true,
  disabledFutureDays: true,
  range: false // Set to true for date range picker
}
```

### 4. Time Field

```typescript
{
  type: "time",
  name: "appointmentTime",
  label: "Appointment Time",
  use12Hours: true,
  format: "h:mm A",
  range: false
}
```

### 5. Textarea Field

```typescript
// Regular textarea
{
  type: "textarea",
  name: "description",
  label: "Description",
  rows: 4,
  truncated: 3 // Show only 3 lines in table view
}

// Rich text editor
{
  type: "textarea",
  name: "content",
  label: "Content",
  rich: true, // Enables rich text editor
  truncated: 4
}
```

### 6. Select Field

```typescript
// Static options
{
  type: "select",
  name: "category",
  label: "Category",
  items: [
    { value: "tech", label: "Technology" },
    { value: "business", label: "Business" },
    { value: "health", label: "Health" }
  ],
  placeholder: "Select category"
}

// Dynamic options with search
{
  type: "select",
  name: "userId",
  label: "User",
  onSearch: async (keyword, form) => {
    const users = await fetchUsers(keyword);
    return users.map(user => ({ value: user.id, label: user.name }));
  },
  searchOnType: true,
  multiple: true
}
```

### 7. Enum Field

```typescript
// Using enum object
enum Status {
  ACTIVE = "active",
  INACTIVE = "inactive",
  PENDING = "pending"
}

{
  type: "enum",
  name: "status",
  label: "Status",
  enum: Status,
  radio: true, // Use radio buttons instead of select
  tagRender: {
    active: { color: "green" },
    inactive: { color: "red" },
    pending: { color: "orange" }
  },
  translation: {
    active: "Active",
    inactive: "Inactive", 
    pending: "Pending"
  }
}
```

### 8. Checkbox Field

```typescript
{
  type: "checkbox",
  name: "isActive",
  label: "Active Status",
  onChange: (value, form) => {
    // Handle checkbox change
  }
}
```

### 9. Color Picker Field

```typescript
{
  type: "color",
  name: "themeColor",
  label: "Theme Color",
  innerProps: {
    // Additional ColorPicker props
  }
}
```

### 10. Image Field

```typescript
// Requires FileUploadProvider implementation
class MyUploadProvider extends FileUploadProvider {
  async upload(file: UploadFile, filePath: string): Promise<string> {
    // Implement upload logic
    return "uploaded-file-url";
  }
  
  async delete(filePath: string): Promise<boolean> {
    // Implement delete logic
    return true;
  }
  
  async getRealUrl(filePath: string): Promise<string> {
    // Return actual file URL
    return filePath;
  }
}

{
  type: "image",
  name: "avatar",
  label: "Profile Picture",
  aspectRatio: 1, // Square aspect ratio
  provider: new MyUploadProvider("user", "avatar")
}
```

### 11. File Field

```typescript
{
  type: "file",
  name: "document",
  label: "Document",
  accept: ".pdf,.doc,.docx",
  multiple: false,
  provider: new MyUploadProvider("documents", "files")
}
```

### 12. Object Field

```typescript
{
  type: "object",
  name: "metadata",
  label: "Metadata",
  render: (value, obj, index) => (
    <div>
      <strong>Type:</strong> {value?.type}
      <br />
      <strong>Size:</strong> {value?.size}
    </div>
  )
}
```

## Component Props

### CrudComponent Props

```typescript
interface CrudComponentProps<T, FormType = T> {
  // Required
  fields: CrudFieldProps<T>[];
  data: T[] | undefined;
  
  // Optional CRUD operations
  onCreate?: (data: FormType) => Promise<any>;
  onUpdate?: (data: FormType & { id: any }) => Promise<any>;
  onDelete?: (id: any) => Promise<any>;
  onHide?: (id: any) => Promise<any>;
  
  // Loading states
  loadingData?: boolean;
  isCreating?: boolean;
  isUpdating?: boolean;
  isDeleting?: boolean;
  isHiding?: boolean;
  
  // Configuration
  idField?: string; // Default: "id"
  grid?: boolean; // Use grid layout for forms
  viewable?: boolean | keyof T; // Enable view modal
  cloneable?: boolean; // Enable clone functionality
  fullWidthModal?: boolean; // Default: true
  
  // Pagination
  paginateProps?: {
    page: number;
    pageSize: number;
    count: number;
    setPage: (page: number) => void;
  };
  
  // Search and filtering
  searchable?: boolean;
  searchFields?: string[];
  
  // Import/Export
  importable?: {
    onImport: (data: any[]) => Promise<any>;
    templateFields: string[];
  };
  onPrint?: () => void;
  printing?: boolean;
  
  // Drag and drop
  draggable?: {
    onDragEnd: (event: DragEndEvent) => void;
    columnLabel?: string;
    tooltip?: string;
  };
  
  // Wizard support
  wizard?: Array<{
    title: string;
    icon?: ReactElement;
    formBuilder?: FormBuilderFunc<T>;
    grid?: boolean;
  }>;
  
  // Custom actions
  extraAction?: (item: T) => ReactElement;
  extraView?: (item: T) => ReactElement;
  onClickNew?: () => void;
  
  // Styling
  size?: "small" | "middle" | "large";
  minusHeight?: string; // For table height calculation
  className?: string;
}
```

### Common Field Properties

All fields support these common properties:

```typescript
{
  // Required
  type: "text" | "email" | "password" | "number" | "date" | "time" | 
        "textarea" | "select" | "enum" | "checkbox" | "color" | 
        "image" | "file" | "object",
  name: "fieldName", // Must match your data type key
  label: "Field Label",
  
  // Optional
  required: boolean,
  hidden: boolean,
  readonly: boolean,
  updatable: boolean,
  placeholder: string,
  fieldTooltip: string,
  fieldClassName: string,
  hideInTable: boolean,
  hideInDescList: boolean,
  width: number | string,
  halign: "left" | "right",
  rules: Rule[], // Ant Design validation rules
  grid: {
    xs?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
  },
  onChange: (value: any, form: FormInstance) => void,
  customFormFieldRender: (form: FormInstance, props: any) => ReactElement
}
```

## Advanced Features

### 1. Custom Form Builder

```typescript
const customFormBuilder: FormBuilderFunc<User> = (form, helpers) => {
  return (
    <div>
      <h3>Custom Form</h3>
      <Form.Item name="name" label="Name">
        <Input />
      </Form.Item>
      {helpers.isAllFieldsHidden('email') && (
        <Form.Item name="email" label="Email">
          <Input />
        </Form.Item>
      )}
    </div>
  );
};

<CrudComponent
  fields={fields}
  data={data}
  formBuilder={customFormBuilder}
/>
```

### 2. Wizard Forms

```typescript
const wizardSteps = [
  {
    title: "Basic Info",
    icon: <UserOutlined />,
    formBuilder: (form, helpers) => (
      <div>
        <Form.Item name="name" label="Name">
          <Input />
        </Form.Item>
      </div>
    )
  },
  {
    title: "Details",
    icon: <InfoOutlined />,
    formBuilder: (form, helpers) => (
      <div>
        <Form.Item name="description" label="Description">
          <Input.TextArea />
        </Form.Item>
      </div>
    )
  }
];

<CrudComponent
  fields={fields}
  data={data}
  wizard={wizardSteps}
/>
```

### 3. Import/Export

```typescript
<CrudComponent
  fields={fields}
  data={data}
  importable={{
    onImport: async (importedData) => {
      // Handle imported data
      await saveImportedData(importedData);
    },
    templateFields: ['name', 'email', 'status']
  }}
  onPrint={() => {
    // Handle print functionality
    window.print();
  }}
/>
```

### 4. Drag and Drop

```typescript
<CrudComponent
  fields={fields}
  data={data}
  draggable={{
    onDragEnd: (event) => {
      const { active, over } = event;
      if (active.id !== over?.id) {
        // Handle reordering
        const newOrder = reorderItems(data, active.id, over.id);
        setData(newOrder);
      }
    },
    columnLabel: "Drag",
    tooltip: "Drag to reorder"
  }}
/>
```

### 5. Search and Filtering

```typescript
<CrudComponent
  fields={fields}
  data={data}
  searchable={true}
  searchFields={['name', 'email', 'status']}
  onSearch={handleSearch}
/>
```

### 6. Pagination

```typescript
const [pagination, setPagination] = useState({
  page: 1,
  pageSize: 10,
  total: 0
});

<CrudComponent
  fields={fields}
  data={data}
  paginateProps={{
    page: pagination.page,
    pageSize: pagination.pageSize,
    count: pagination.total,
    setPage: (page) => setPagination(prev => ({ ...prev, page }))
  }}
/>
```

## Common Components

### Buttons

```typescript
import { 
  NewButton, 
  PrintButton, 
  RefreshButton, 
  ExportButton,
  ImportButton,
  ButtonComponent 
} from '@kingteza/crud-component/common';

// Usage
<NewButton onClick={handleNew} />
<PrintButton onClick={handlePrint} loading={printing} />
<RefreshButton onClick={handleRefresh} />
<ExportButton onClick={handleExport} />
<ImportButton onClick={handleImport} />
```

### Form Components

```typescript
import { 
  TextField, 
  NumberTextField, 
  SelectComponent,
  DatePickerComponent,
  TimePickerComponent,
  CheckBoxComponent 
} from '@kingteza/crud-component/common';

// Usage in custom forms
<TextField
  name="name"
  label="Name"
  required
  placeholder="Enter name"
  rules={[{ required: true, message: 'Name is required' }]}
/>
```

## Utility Functions

### DateUtil

```typescript
import { DateUtil } from '@kingteza/crud-component/util';

// Date formatting
DateUtil.format(date, 'YYYY-MM-DD');
DateUtil.formatDate(date);
DateUtil.formatDateTime(date);

// Date manipulation
DateUtil.addDays(date, 7);
DateUtil.subtractDays(date, 3);
DateUtil.startOfDay(date);
DateUtil.endOfDay(date);
```

### NumberUtil

```typescript
import { NumberUtil } from '@kingteza/crud-component/util';

// Number formatting
NumberUtil.toMoney(1234.56); // "1,234.56"
NumberUtil.round(3.14159, 2); // 3.14
NumberUtil.toInt("123.45"); // 123
```

### ValidationUtil

```typescript
import { ValidationUtil } from '@kingteza/crud-component/util';

// Pre-built validation rules
const rules = [
  ValidationUtil.required,
  ValidationUtil.maxValidation(100),
  ValidationUtil.positiveNumberValidation,
  ValidationUtil.emailValidation,
  ValidationUtil.phoneValidation,
  ValidationUtil.nicValidation,
  ValidationUtil.passwordValidation
];
```

## Best Practices

### 1. Type Safety

```typescript
// ✅ Good - Always use generics
<CrudComponent<User>
  data={users}
  fields={userFields}
  onCreate={handleCreate}
/>

// ❌ Bad - Missing type safety
<CrudComponent
  data={users}
  fields={userFields}
  onCreate={handleCreate}
/>
```

### 2. Field Naming

```typescript
interface User {
  id: string;
  name: string;
  email: string;
}

// ✅ Good - Field names match interface
const fields = [
  { type: "text", name: "name", label: "Name" },
  { type: "email", name: "email", label: "Email" }
];

// ❌ Bad - Field names don't match interface
const fields = [
  { type: "text", name: "userName", label: "Name" },
  { type: "email", name: "emailAddress", label: "Email" }
];
```

### 3. Error Handling

```typescript
const handleCreate = async (data: User) => {
  try {
    setCreating(true);
    const newUser = await createUser(data);
    setUsers(prev => [...prev, newUser]);
  } catch (error) {
    message.error('Failed to create user');
  } finally {
    setCreating(false);
  }
};
```

### 4. Performance Optimization

```typescript
const CrudComponentMemo = React.memo(CrudComponent);

// Use loading states
<CrudComponentMemo
  data={users}
  fields={userFields}
  loadingData={loading}
  isCreating={creating}
  isUpdating={updating}
  isDeleting={deleting}
  onCreate={handleCreate}
  onUpdate={handleUpdate}
  onDelete={handleDelete}
/>
```

### 5. Responsive Design

```typescript
const fields = [
  {
    type: "text",
    name: "name",
    label: "Name",
    grid: { xs: 24, sm: 12, md: 8 }
  },
  {
    type: "email",
    name: "email", 
    label: "Email",
    grid: { xs: 24, sm: 12, md: 8 }
  }
];

<CrudComponent
  fields={fields}
  data={data}
  grid={true} // Enable grid layout
/>
```

## Common Patterns

### 1. Complete CRUD Implementation

```typescript
const UserManagement = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(false);
  const [creating, setCreating] = useState(false);
  const [updating, setUpdating] = useState(false);
  const [deleting, setDeleting] = useState(false);

  const fields: CrudFieldProps<User>[] = [
    {
      type: "text",
      name: "name",
      label: "Name",
      required: true
    },
    {
      type: "email",
      name: "email",
      label: "Email",
      required: true,
      rules: [{ type: 'email' }]
    },
    {
      type: "select",
      name: "role",
      label: "Role",
      items: [
        { value: "admin", label: "Admin" },
        { value: "user", label: "User" }
      ]
    }
  ];

  const handleCreate = async (data: User) => {
    setCreating(true);
    try {
      const newUser = await createUser(data);
      setUsers(prev => [...prev, newUser]);
    } finally {
      setCreating(false);
    }
  };

  const handleUpdate = async (data: User & { id: any }) => {
    setUpdating(true);
    try {
      const updatedUser = await updateUser(data);
      setUsers(prev => prev.map(u => u.id === data.id ? updatedUser : u));
    } finally {
      setUpdating(false);
    }
  };

  const handleDelete = async (id: any) => {
    setDeleting(true);
    try {
      await deleteUser(id);
      setUsers(prev => prev.filter(u => u.id !== id));
    } finally {
      setDeleting(false);
    }
  };

  return (
    <CrudComponent<User>
      data={users}
      fields={fields}
      loadingData={loading}
      isCreating={creating}
      isUpdating={updating}
      isDeleting={deleting}
      onCreate={handleCreate}
      onUpdate={handleUpdate}
      onDelete={handleDelete}
    />
  );
};
```

## Troubleshooting

### Common Issues

1. **i18n not initialized**: Always call `setupI18n()` before using components
2. **Type errors**: Ensure field names match your data type keys
3. **Missing peer dependencies**: Install required Ant Design and React versions
4. **File upload issues**: Implement proper FileUploadProvider
5. **Form validation**: Use proper validation rules and error handling

### Debug Tips

1. Check browser console for TypeScript errors
2. Verify field types and names match your data structure
3. Ensure all required props are provided
4. Check network requests for API calls
5. Use React DevTools to inspect component state

## API Reference

### Exported Types

```typescript
// Main component
export { CrudComponent } from '@kingteza/crud-component';

// Field types
export type { CrudFieldProps } from '@kingteza/crud-component';

// Action types
export type { CrudActionsProps } from '@kingteza/crud-component';

// Modal types
export type { CrudModalProps, CrudModalRef } from '@kingteza/crud-component';

// Utility types
export type { 
  CheckboxBasedFieldProps,
  ColorPickerFieldProps,
  CrudComponentProps,
  CrudFieldGrid,
  CrudPaginateProps,
  CrudPurpose,
  CrudWizardProp,
  DateBasedFieldProps,
  EnumCrudField,
  FormBuilderFunc,
  FormBuilderFunc0,
  GetFormFieldOptions,
  InitialCrudField,
  NumberBasedFieldProps,
  ObjectCrudField,
  SelectCrudField,
  SelectFieldItem,
  TextBasedFieldProps,
  TimeBasedFieldProps,
} from '@kingteza/crud-component';
```

This documentation provides a comprehensive guide for using the @kingteza/crud-component library. The library is designed to be intuitive and powerful, allowing developers to create sophisticated data management interfaces with minimal configuration while maintaining full type safety and customization options.
